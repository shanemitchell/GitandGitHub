What happens when you initialize a repository? Why do you need to do it?

	Initialising a repository creates a .git folder, that contains metadata on the repository; it does not create any initial commits, so no files are added to the repository. You need to init to create an empty repository in the current folder that can be used to track and commit any future changes.
	
How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area is an intermediate stage between the working directory and the repository. It allows the developer to place a number of files in the staging area, and review them as a collection before committing.
	
How can you use the staging area to make sure you have one commit per logical change?

	By only adding files that encompass a logical change, and reviewing by using "git diff --staged"" to review all changes between the logical change and the latest commit in the repository. 
	
What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Trying experimental new features, or if more than one developer are working on the same repository commit and want to work independently of each other. Implementing client specific branding or functionality may call for a separate branch.
	
How do the diagrams help you visualize the branch structure?

	The diagrams make it visually clear where branches diverge, and to identify the history of each branch back to the root commit.